# generated by datamodel-codegen:
#   filename:  s2-cem.yaml
#   timestamp: 2023-03-30T21:07:36+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Extra, Field

from . import ID, Commodity, Duration, NumberRange, PowerRange, Timer, Transition


class AverageDemandRateForecastElement(BaseModel):
    class Config:
        extra = Extra.forbid

    duration: Duration = Field(..., description='Duration of the element')
    demand_rate_upper_limit: Optional[float] = Field(
        None,
        description='The upper limit of the range with a 100\xa0% probability that the demand rate is within that range',
    )
    demand_rate_upper_95PPR: Optional[float] = Field(
        None,
        description='The upper limit of the range with a 95\xa0% probability that the demand rate is within that range',
    )
    demand_rate_upper_68PPR: Optional[float] = Field(
        None,
        description='The upper limit of the range with a 68\xa0% probability that the demand rate is within that range',
    )
    demand_rate_expected: float = Field(
        ...,
        description='The most likely value for the demand rate; the expected increase or decrease of the fill_level per second',
    )
    demand_rate_lower_68PPR: Optional[float] = Field(
        None,
        description='The lower limit of the range with a 68\xa0% probability that the demand rate is within that range',
    )
    demand_rate_lower_95PPR: Optional[float] = Field(
        None,
        description='The lower limit of the range with a 95\xa0% probability that the demand rate is within that range',
    )
    demand_rate_lower_limit: Optional[float] = Field(
        None,
        description='The lower limit of the range with a 100\xa0% probability that the demand rate is within that range',
    )


class OperationMode(BaseModel):
    class Config:
        extra = Extra.forbid

    Id: ID = Field(
        ...,
        description='ID of this operation mode. Must be unique in the scope of the DDBC.ActuatorDescription in which it is used.',
    )
    diagnostic_label: Optional[str] = Field(
        None,
        description='Human readable name/description of the DDBC.OperationMode. This element is only intended for diagnostic purposes and not for HMI applications.',
    )
    power_ranges: List[PowerRange] = Field(
        ...,
        description='The power produced or consumed by this operation mode. The start of each PowerRange is associated with an operation_mode_factor of 0, the end is associated with an operation_mode_factor of 1. In the array there must be at least one PowerRange, and at most one PowerRange per CommodityQuantity.',
        max_items=10,
        min_items=1,
    )
    supply_range: NumberRange = Field(
        ...,
        description='The supply rate this DDBC.OperationMode can deliver for the CEM to match the demand rate. The start of the NumberRange is associated with an operation_mode_factor of 0, the end is associated with an operation_mode_factor of 1.',
    )
    running_costs: Optional[NumberRange] = Field(
        None,
        description='Additional costs per second (e.g. wear, services) associated with this operation mode in the currency defined by the ResourceManagerDetails, excluding the commodity cost. The range is expressing uncertainty and is not linked to the operation_mode_factor.',
    )
    abnormal_condition_only: bool = Field(
        ...,
        description='Indicates if this DDBC.OperationMode may only be used during an abnormal condition.',
    )


class ActuatorDescription(BaseModel):
    class Config:
        extra = Extra.forbid

    id: ID = Field(
        ...,
        description='ID of this DDBC.ActuatorDescription. Must be unique in the scope of the Resource Manager, for at least the duration of the session between Resource Manager and CEM.',
    )
    diagnostic_label: Optional[str] = Field(
        None,
        description='Human readable name/description of the actuator. This element is only intended for diagnostic purposes and not for HMI applications.',
    )
    supported_commodites: List[Commodity] = Field(
        ...,
        description='Commodities supported by the operation modes of this actuator. There shall be at least one commodity',
        max_items=4,
        min_items=1,
    )
    operation_modes: List[OperationMode] = Field(
        ...,
        description='List of all Operation Modes that are available for this actuator. There shall be at least one DDBC.OperationMode.',
        max_items=100,
        min_items=1,
    )
    transitions: List[Transition] = Field(
        ...,
        description='List of Transitions between Operation Modes. Shall contain at least one Transition.',
        max_items=1000,
        min_items=1,
    )
    timers: List[Timer] = Field(
        ...,
        description='List of Timers associated with Transitions for this Actuator. Can be empty.',
        max_items=1000,
        min_items=0,
    )
