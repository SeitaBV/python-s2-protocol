# generated by datamodel-codegen:
#   filename:  s2-cem.yaml
#   timestamp: 2023-03-30T21:07:36+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Extra, Field

from . import ID, Duration, PowerForecastValue


class PowerSequenceStatus(Enum):
    NOT_SCHEDULED = 'NOT_SCHEDULED'
    SCHEDULED = 'SCHEDULED'
    EXECUTING = 'EXECUTING'
    INTERRUPTED = 'INTERRUPTED'
    FINISHED = 'FINISHED'
    ABORTED = 'ABORTED'


class PowerSequenceElement(BaseModel):
    class Config:
        extra = Extra.forbid

    duration: Duration = Field(
        ..., description='Duration of the PPBC.PowerSequenceElement.'
    )
    power_values: List[PowerForecastValue] = Field(
        ...,
        description='The value of power and deviations for the given duration. The array should contain at least one PowerForecastValue and at most one PowerForecastValue per CommodityQuantity.',
        max_items=10,
        min_items=1,
    )


class PowerSequenceContainerStatus(BaseModel):
    class Config:
        extra = Extra.forbid

    power_profile_id: ID = Field(
        ...,
        description='ID of the PPBC.PowerProfileDefinition of which the data element ‘sequence_container_id’ refers to. ',
    )
    sequence_container_id: ID = Field(
        ...,
        description='ID of the PPBC.PowerSequenceContainer this PPBC.PowerSequenceContainerStatus provides information about.',
    )
    selected_sequence_id: Optional[ID] = Field(
        None,
        description='ID of selected PPBC.PowerSequence. When no ID is given, no sequence was selected yet.',
    )
    progress: Optional[Duration] = Field(
        None,
        description='Time that has passed since the selected sequence has started. A value must be provided, unless no sequence has been selected or the selected sequence hasn’t started yet.',
    )
    status: PowerSequenceStatus = Field(
        ..., description='Status of the selected PPBC.PowerSequence'
    )


class PowerSequence(BaseModel):
    class Config:
        extra = Extra.forbid

    id: ID = Field(
        ...,
        description='ID of the PPBC.PowerSequence. Must be unique in the scope of the PPBC.PowerSequnceContainer in which it is used.',
    )
    elements: List[PowerSequenceElement] = Field(
        ...,
        description='List of PPBC.PowerSequenceElements. Shall contain at least one element. Elements must be placed in chronological order.',
        max_items=288,
        min_items=1,
    )
    is_interruptible: bool = Field(
        ...,
        description='Indicates whether the option of pausing a sequence is available.',
    )
    max_pause_before: Optional[Duration] = Field(
        None,
        description='The maximum duration for which a device can be paused between the end of the previous running sequence and the start of this one',
    )
    abnormal_condition_only: bool = Field(
        ...,
        description='Indicates if this PPBC.PowerSequence may only be used during an abnormal condition',
    )


class PowerSequenceContainer(BaseModel):
    class Config:
        extra = Extra.forbid

    id: ID = Field(
        ...,
        description='ID of the PPBC.PowerSequenceContainer. Must be unique in the scope of the PPBC.PowerProfileDefinition in which it is used.',
    )
    power_sequences: List[PowerSequence] = Field(
        ...,
        description='List of alternative Sequences where one could be chosen by the CEM',
        max_items=288,
        min_items=1,
    )
